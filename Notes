O docker run executa os seguintes comandos:
  >docker container create
  >docker container start
  >docker container exec

Ver também:
  >docker container ls -a
  >docker ps -a

Exemplos de comandos do docker:
  >docker container run --help
  >docker container run debian bash --version
  >docker container run --rm debian bash --version #remove o container após o término do processo
  >docker container run -it debian bash
    -i: modo iterativo
    -t: nos dáacesso ao terminal do container
  >docker container run --name mydeb -it debian bash
  >docker container run -p 8080:80 nginx
    -p: mapeamento de portas. Ex de uso: -p 8080:80 -> a porta 8080 do host está vinculada à porta 80 do container
  #executar o comando abaixo a aprtir da pasta pai da ex-volume
  >docker container run -p 8080:80 -v "$(pwd)"/ex-volume/html:/usr/share/nginx/html nginx
    -v: mapeia volumes. Ex: -v "$(pwd)"/ex-volume/html:/usr/share/nginx/html. O path "/usr/share/nginx/html" do container apontará para path "$(pwd)/ex-volume/html" do host
      "$(pwd)": pega a pasta corrente. As aspas resolvem possíveis problemas da pasta conter espaços.
  #executar o comando abaixo a aprtir da pasta pai da ex-volume
  >docker container run -d --name ex-daemon-basic -p 8080:80 -v $(pwd)/ex-volume/html:/usr/share/nginx/html nginx
    -d: modo daemon, mantém o container rodando em background
  >docker container stop ex-daemon-basic
    #docker container stop <nome_do_container_já_existente>
    #Comando para parar um container
  >docker container start ex-daemon-basic
    #docker container start <nome_do_container_já_existente>
    #Comando para iniciar um container
  >docker container restart ex-daemon-basic
    #docker container restart <nome_do_container_já_existente>
    #Comando para reiniciar um container - ele pode estar já rodando ou já ter sido parado
  >docker container logs ex-daemon-basic
    #docker container logs <nome_do_container_já_existente>
  >docker container inspect ex-daemon-basic
    #docker container inspect <nome_do_container_já_existente>
    #Retorna um vetor de objetos (JSON) com informações do container, como os binds (mapeamento de volumes)
  >docker container exec ex-daemon-basic uname -or
    #executa o comando uname dentro do container
  >docker container ls
    #lista os containeres
  >docker container ls
    #lista as imagens
  >docker volume ls
    #lista os volumes




fiz esse repositório!
https://github.com/LucasFurioFranco/Docker-Course

Daí já tô praticando git tbm!
2:56 PM
Fiquei meia hora sem entender o pq n tava funcionando, acabou q eu tinha digitado /urs/ ao invés de /usr/ num path
4:32 PM
Show de bola Banho!
4:45 PM




O método run SEMPRE cria um novo container

Nomeando seus containers
  >docker container run --name mydeb -it debian bash

Reutilizando containers
  >docker container start -ai mydeb
  #docker container start -<flags> <container_name>
    -a: apache - pega o terminal
    -i: modo iterativo

Compartilhamentos/comunicação:
  - Portas
    - Mapeamento de portas
  - Compartilhamento de pastas entre host e containers
    - Mapeamento de volumes
  - Copiar arquivos entre containers e host
  - Comunicação entre containers diferentes

Mapeamento de Portas - uso de nginx
  >docker container run -p 8080:80 nginx
    -p: mapeamento de portas. Ex de uso: -p 8080:80 -> a porta 8080 do host está vinculada à porta 80 do container

Mapeamento de volumes
  #foi criada a pasta ex-volume
  >docker container run -p 8080:80 -v "$(pwd)"/ex-volume/html:/usr/share/nginx/html nginx
    -v: mapeia volumes. Ex: -v "$(pwd)"/ex-volume/html:/usr/share/nginx/html. O path "/usr/share/nginx/html" do container apontará para path "$(pwd)/ex-volume/html" do host
      $(pwd): pega a pasta corrente
      "$(pwd)": pega a pasta corrente e as aspas garantem q ue não haverá problemas caso a pasta tenha um nome contendo espaços

Rodando um servidor web em background
  >docker container run -d --name ex-daemon-basic -p 8080:80 -v $(pwd)/ex-volume/html:/usr/share/nginx/html nginx
    -d: modo daemon, mantém o container rodando em background
  >docker container stop ex-daemon-basic
    #docker container stop <nome_do_container_já_existente>
    #Comando para parar um container
  >docker container start ex-daemon-basic
    #docker container start <nome_do_container_já_existente>
    #Comando para iniciar um container
  >docker container restart ex-daemon-basic
    #docker container restart <nome_do_container_já_existente>
    #Comando para reiniciar um container - ele pode estar já rodando ou já ter sido parado

Acessando os logs dos containers
  >docker container logs ex-daemon-basic
    #docker container logs <nome_do_container_já_existente>
  >docker container inspect ex-daemon-basic
    #docker container inspect <nome_do_container_já_existente>
    #Retorna um vetor de objetos (JSON) com informações do container, como os binds (mapeamento de volumes)
  >docker container exec ex-daemon-basic uname -or
    #executa o comando uname dentro do container



Imagens
  >docker image --help
  >docker image pull redis:latest

Comandos básicos de gerenciamento de imagens
  #pull, ls, rm, inspect, tag, build, push
  #pull - baixa a imagem diretamente do docker hub (geralmente ocorre de forma implícita, como quando ocorre um run de uma imagem que não erstá na máquina)
  #ls - lista as imagens presentes na máquina
  #rm - remove uma ou mais imagens. Para demover mais de uma específicas, especificar as tags ou hashs separados pos espaço
  #inspect - passando o nome da tag, recebemos as informações no sobre a imagem no formato JSON
  #tag - docker image <imagem_de_origem> <tag_a_ser_aplicada> - aplica uma tag em uma imagem
  #build - interpreta um arquivo descritor do docker (DockerFile) e cria a imagem a partir dele
  #push - sobre a imagem pro registro

Dockerhub vs Docker Registry
  #não são as mesmas coisas, o DockerHub contém um Docker Registry, porém podemos criar e hospedar um registro próprio, por exemplo para projetos privados
  #O Docker Registry é um serviço que oferece uma API para o gerenciamento das imagens em algum servidor

Meu primeiro Build
  #vamos criar um descritor. Está em primeiro-build/Dockerfile
  #na pasta onde o dockerfile está presente (no caso, .../Docker/primeiro-build), executar o comando abaixo
  >docker image build -t ex-simple-build .
    -t: nome da tag da imagem. Ex: ... -t meu_nome_da_imagem
  >docker image ls #verifica se a imagem foi criada
  >docker container run -p 80:80 ex-simple-build #cria o container a partir desta imagem e o executa
  #a imagem pode conter mapeamento de portas, volume, comandos (ex: instalação de git, etc)

Uso das instruções de preparação - ajuda a criar pontos de personalização
#em /build-com-arg, com seu Dockerfile já criado
  >docker image build -t ex-build-arg .
  >docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
#agora passando parametros
  >docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .
  >docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
#acessando o inspect
  >docker image inspect --format="{{index .Config.Labels \"maintainer\"}}" ex-build-arg

Uso das instruções de povoamento
